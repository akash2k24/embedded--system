

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Dec 12 16:05:21 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    10                           	dabs	1,0x7E,2
    11  0000                     
    12                           ; Version 2.20
    13                           ; Generated 12/02/2020 GMT
    14                           ; 
    15                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F877A Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0001                     _TMR0	set	1
   167  0008                     _PORTD	set	8
   168  005A                     _TMR0IF	set	90
   169  0038                     _RC0	set	56
   170  0081                     _OPTION_REG	set	129
   171  0088                     _TRISD	set	136
   172  0438                     _TRISC0	set	1080
   173                           
   174                           	psect	cinit
   175  07FC                     start_initialization:	
   176                           ; #config settings
   177                           
   178  07FC                     __initialization:
   179  07FC                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182  07FC                     __end_of__initialization:
   183  07FC  0183               	clrf	3
   184  07FD  120A  118A  2F7B   	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	cstackCOMMON
   187  0070                     __pcstackCOMMON:
   188  0070                     ?_timer0delay:
   189  0070                     ??_timer0delay:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_seq:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_main:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     timer0delay@i:	
   199                           ; 1 bytes @ 0x0
   200                           
   201                           
   202                           ; 2 bytes @ 0x0
   203  0070                     	ds	2
   204  0072                     ??_seq:
   205                           
   206                           ; 1 bytes @ 0x2
   207  0072                     	ds	1
   208  0073                     seq@get:
   209                           
   210                           ; 1 bytes @ 0x3
   211  0073                     	ds	1
   212  0074                     seq@j:
   213                           
   214                           ; 2 bytes @ 0x4
   215  0074                     	ds	2
   216  0076                     seq@j_36:
   217                           
   218                           ; 2 bytes @ 0x6
   219  0076                     	ds	2
   220  0078                     ??_main:
   221                           
   222                           	psect	maintext
   223  077B                     __pmaintext:	
   224                           ; 1 bytes @ 0x8
   225 ;;
   226 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   227 ;;
   228 ;; *************** function _main *****************
   229 ;; Defined at:
   230 ;;		line 44 in file "main.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;		None
   233 ;; Auto vars:     Size  Location     Type
   234 ;;		None
   235 ;; Return value:  Size  Location     Type
   236 ;;                  1    wreg      void 
   237 ;; Registers used:
   238 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   239 ;; Tracked objects:
   240 ;;		On entry : B00/0
   241 ;;		On exit  : 0/0
   242 ;;		Unchanged: 0/0
   243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   244 ;;      Params:         0       0       0       0       0
   245 ;;      Locals:         0       0       0       0       0
   246 ;;      Temps:          0       0       0       0       0
   247 ;;      Totals:         0       0       0       0       0
   248 ;;Total ram usage:        0 bytes
   249 ;; Hardware stack levels required when called:    2
   250 ;; This function calls:
   251 ;;		_seq
   252 ;; This function is called by:
   253 ;;		Startup code after reset
   254 ;; This function uses a non-reentrant model
   255 ;;
   256                           
   257                           
   258                           ;psect for function _main
   259  077B                     _main:
   260  077B                     l675:	
   261                           ;incstack = 0
   262                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   263                           
   264                           
   265                           ;main.c: 46: TRISC0 = 1;
   266  077B  1683               	bsf	3,5	;RP0=1, select bank1
   267  077C  1303               	bcf	3,6	;RP1=0, select bank1
   268  077D  1407               	bsf	7,0	;volatile
   269  077E                     l677:
   270                           
   271                           ;main.c: 47: TRISD = 0x00;
   272  077E  0188               	clrf	8	;volatile
   273                           
   274                           ;main.c: 48: PORTD=0x00;
   275  077F  1283               	bcf	3,5	;RP0=0, select bank0
   276  0780  1303               	bcf	3,6	;RP1=0, select bank0
   277  0781  0188               	clrf	8	;volatile
   278  0782                     l679:
   279                           
   280                           ;main.c: 49: OPTION_REG=0b00000111;
   281  0782  3007               	movlw	7
   282  0783  1683               	bsf	3,5	;RP0=1, select bank1
   283  0784  1303               	bcf	3,6	;RP1=0, select bank1
   284  0785  0081               	movwf	1	;volatile
   285  0786                     l681:
   286                           
   287                           ;main.c: 50: TMR0=237;
   288  0786  30ED               	movlw	237
   289  0787  1283               	bcf	3,5	;RP0=0, select bank0
   290  0788  1303               	bcf	3,6	;RP1=0, select bank0
   291  0789  0081               	movwf	1	;volatile
   292  078A                     l683:
   293                           
   294                           ;main.c: 52: {;main.c: 53:     if (RC0==0)
   295  078A  1807               	btfsc	7,0	;volatile
   296  078B  2F8D               	goto	u71
   297  078C  2F8E               	goto	u70
   298  078D                     u71:
   299  078D  2F8A               	goto	l683
   300  078E                     u70:
   301  078E                     l685:
   302                           
   303                           ;main.c: 54:     {;main.c: 56:         seq(1);
   304  078E  3001               	movlw	1
   305  078F  120A  118A  27B3  120A  118A  	fcall	_seq
   306                           
   307                           ;main.c: 57:         seq(3);
   308  0794  3003               	movlw	3
   309  0795  120A  118A  27B3  120A  118A  	fcall	_seq
   310                           
   311                           ;main.c: 58:         seq(7);
   312  079A  3007               	movlw	7
   313  079B  120A  118A  27B3  120A  118A  	fcall	_seq
   314                           
   315                           ;main.c: 59:         seq(15);
   316  07A0  300F               	movlw	15
   317  07A1  120A  118A  27B3  120A  118A  	fcall	_seq
   318                           
   319                           ;main.c: 61:         while(RC0==1)
   320  07A6  2FA9               	goto	l689
   321  07A7                     l687:
   322                           
   323                           ;main.c: 62:         {;main.c: 63:             PORTD=0xFF;
   324  07A7  30FF               	movlw	255
   325  07A8  0088               	movwf	8	;volatile
   326  07A9                     l689:
   327                           
   328                           ;main.c: 61:         while(RC0==1)
   329  07A9  1283               	bcf	3,5	;RP0=0, select bank0
   330  07AA  1303               	bcf	3,6	;RP1=0, select bank0
   331  07AB  1807               	btfsc	7,0	;volatile
   332  07AC  2FAE               	goto	u81
   333  07AD  2FAF               	goto	u80
   334  07AE                     u81:
   335  07AE  2FA7               	goto	l687
   336  07AF                     u80:
   337  07AF  2F8A               	goto	l683
   338  07B0  120A  118A  2800   	ljmp	start
   339  07B3                     __end_of_main:
   340                           
   341                           	psect	text1
   342  07B3                     __ptext1:	
   343 ;; *************** function _seq *****************
   344 ;; Defined at:
   345 ;;		line 28 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;  get             1    wreg     unsigned char 
   348 ;; Auto vars:     Size  Location     Type
   349 ;;  get             1    3[COMMON] unsigned char 
   350 ;;  j               2    6[COMMON] int 
   351 ;;  j               2    4[COMMON] int 
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   361 ;;      Params:         0       0       0       0       0
   362 ;;      Locals:         5       0       0       0       0
   363 ;;      Temps:          1       0       0       0       0
   364 ;;      Totals:         6       0       0       0       0
   365 ;;Total ram usage:        6 bytes
   366 ;; Hardware stack levels used:    1
   367 ;; Hardware stack levels required when called:    1
   368 ;; This function calls:
   369 ;;		_timer0delay
   370 ;; This function is called by:
   371 ;;		_main
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           
   376                           ;psect for function _seq
   377  07B3                     _seq:
   378                           
   379                           ;incstack = 0
   380                           ; Regs used in _seq: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   381                           ;seq@get stored from wreg
   382  07B3  00F3               	movwf	seq@get
   383  07B4                     l647:
   384                           
   385                           ;main.c: 28: void seq(char get);main.c: 29: {;main.c: 30: {;main.c: 31: for (int j=0; j<
      +                          =7; j++)
   386  07B4  01F4               	clrf	seq@j
   387  07B5  01F5               	clrf	seq@j+1
   388  07B6                     l653:
   389                           
   390                           ;main.c: 32: {;main.c: 33: PORTD = get << j;
   391  07B6  0873               	movf	seq@get,w
   392  07B7  00F2               	movwf	??_seq
   393  07B8  0A74               	incf	seq@j,w
   394  07B9  2FBC               	goto	u34
   395  07BA                     u35:
   396  07BA  1003               	clrc
   397  07BB  0DF2               	rlf	??_seq,f
   398  07BC                     u34:
   399  07BC  3EFF               	addlw	-1
   400  07BD  1D03               	skipz
   401  07BE  2FBA               	goto	u35
   402  07BF  0872               	movf	??_seq,w
   403  07C0  1283               	bcf	3,5	;RP0=0, select bank0
   404  07C1  1303               	bcf	3,6	;RP1=0, select bank0
   405  07C2  0088               	movwf	8	;volatile
   406  07C3                     l655:
   407                           
   408                           ;main.c: 34: timer0delay();
   409  07C3  120A  118A  2760  120A  118A  	fcall	_timer0delay
   410  07C8                     l657:
   411                           
   412                           ;main.c: 35: }
   413  07C8  3001               	movlw	1
   414  07C9  07F4               	addwf	seq@j,f
   415  07CA  1803               	skipnc
   416  07CB  0AF5               	incf	seq@j+1,f
   417  07CC  3000               	movlw	0
   418  07CD  07F5               	addwf	seq@j+1,f
   419  07CE                     l659:
   420  07CE  0875               	movf	seq@j+1,w
   421  07CF  3A80               	xorlw	128
   422  07D0  00FF               	movwf	btemp+1
   423  07D1  3080               	movlw	128
   424  07D2  027F               	subwf	btemp+1,w
   425  07D3  1D03               	skipz
   426  07D4  2FD7               	goto	u45
   427  07D5  3008               	movlw	8
   428  07D6  0274               	subwf	seq@j,w
   429  07D7                     u45:
   430  07D7  1C03               	skipc
   431  07D8  2FDA               	goto	u41
   432  07D9  2FDB               	goto	u40
   433  07DA                     u41:
   434  07DA  2FB6               	goto	l653
   435  07DB                     u40:
   436  07DB                     l661:
   437                           
   438                           ;main.c: 36: for (int j=7; j>=0; j--)
   439  07DB  3007               	movlw	7
   440  07DC  00F6               	movwf	seq@j_36
   441  07DD  3000               	movlw	0
   442  07DE  00F7               	movwf	seq@j_36+1
   443  07DF                     l667:
   444                           
   445                           ;main.c: 37: {;main.c: 38: PORTD = get << j;
   446  07DF  0873               	movf	seq@get,w
   447  07E0  00F2               	movwf	??_seq
   448  07E1  0A76               	incf	seq@j_36,w
   449  07E2  2FE5               	goto	u54
   450  07E3                     u55:
   451  07E3  1003               	clrc
   452  07E4  0DF2               	rlf	??_seq,f
   453  07E5                     u54:
   454  07E5  3EFF               	addlw	-1
   455  07E6  1D03               	skipz
   456  07E7  2FE3               	goto	u55
   457  07E8  0872               	movf	??_seq,w
   458  07E9  1283               	bcf	3,5	;RP0=0, select bank0
   459  07EA  1303               	bcf	3,6	;RP1=0, select bank0
   460  07EB  0088               	movwf	8	;volatile
   461  07EC                     l669:
   462                           
   463                           ;main.c: 39: timer0delay();
   464  07EC  120A  118A  2760  120A  118A  	fcall	_timer0delay
   465  07F1                     l671:
   466                           
   467                           ;main.c: 40: }
   468  07F1  30FF               	movlw	255
   469  07F2  07F6               	addwf	seq@j_36,f
   470  07F3  1803               	skipnc
   471  07F4  0AF7               	incf	seq@j_36+1,f
   472  07F5  30FF               	movlw	255
   473  07F6  07F7               	addwf	seq@j_36+1,f
   474  07F7                     l673:
   475  07F7  1FF7               	btfss	seq@j_36+1,7
   476  07F8  2FFA               	goto	u61
   477  07F9  2FFB               	goto	u60
   478  07FA                     u61:
   479  07FA  2FDF               	goto	l667
   480  07FB                     u60:
   481  07FB                     l23:
   482  07FB  0008               	return
   483  07FC                     __end_of_seq:
   484                           
   485                           	psect	text2
   486  0760                     __ptext2:	
   487 ;; *************** function _timer0delay *****************
   488 ;; Defined at:
   489 ;;		line 68 in file "main.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;  i               2    0[COMMON] int 
   494 ;; Return value:  Size  Location     Type
   495 ;;                  1    wreg      void 
   496 ;; Registers used:
   497 ;;		wreg, status,2, btemp+1
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   503 ;;      Params:         0       0       0       0       0
   504 ;;      Locals:         2       0       0       0       0
   505 ;;      Temps:          0       0       0       0       0
   506 ;;      Totals:         2       0       0       0       0
   507 ;;Total ram usage:        2 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; This function calls:
   510 ;;		Nothing
   511 ;; This function is called by:
   512 ;;		_seq
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           
   517                           ;psect for function _timer0delay
   518  0760                     _timer0delay:
   519  0760                     l635:	
   520                           ;incstack = 0
   521                           ; Regs used in _timer0delay: [wreg+status,2+btemp+1]
   522                           
   523                           
   524                           ;main.c: 70:     int i;;main.c: 71:     for (i=0;i <10000 ; i++);{
   525  0760  01F0               	clrf	timer0delay@i
   526  0761  01F1               	clrf	timer0delay@i+1
   527  0762                     l641:
   528  0762  3001               	movlw	1
   529  0763  07F0               	addwf	timer0delay@i,f
   530  0764  1803               	skipnc
   531  0765  0AF1               	incf	timer0delay@i+1,f
   532  0766  3000               	movlw	0
   533  0767  07F1               	addwf	timer0delay@i+1,f
   534  0768                     l643:
   535  0768  0871               	movf	timer0delay@i+1,w
   536  0769  3A80               	xorlw	128
   537  076A  00FF               	movwf	btemp+1
   538  076B  30A7               	movlw	167
   539  076C  027F               	subwf	btemp+1,w
   540  076D  1D03               	skipz
   541  076E  2F71               	goto	u15
   542  076F  3010               	movlw	16
   543  0770  0270               	subwf	timer0delay@i,w
   544  0771                     u15:
   545  0771  1C03               	skipc
   546  0772  2F74               	goto	u11
   547  0773  2F75               	goto	u10
   548  0774                     u11:
   549  0774  2F62               	goto	l641
   550  0775                     u10:
   551  0775                     l40:
   552  0775  1D0B               	btfss	11,2	;volatile
   553  0776  2F78               	goto	u21
   554  0777  2F79               	goto	u20
   555  0778                     u21:
   556  0778  2F75               	goto	l40
   557  0779                     u20:
   558  0779                     l42:
   559                           
   560                           ;main.c: 73:         TMR0IF=0;i=0;
   561  0779  110B               	bcf	11,2	;volatile
   562  077A                     l645:
   563  077A                     l43:
   564  077A  0008               	return
   565  077B                     __end_of_timer0delay:
   566  007E                     btemp	set	126	;btemp
   567  007E                     wtemp0	set	126
   568                           
   569                           	psect	config
   570                           
   571                           ;Config register CONFIG @ 0x2007
   572                           ;	Oscillator Selection bits
   573                           ;	FOSC = HS, HS oscillator
   574                           ;	Watchdog Timer Enable bit
   575                           ;	WDTE = OFF, WDT disabled
   576                           ;	Power-up Timer Enable bit
   577                           ;	PWRTE = OFF, PWRT disabled
   578                           ;	Brown-out Reset Enable bit
   579                           ;	BOREN = ON, BOR enabled
   580                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   581                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   582                           ;	Data EEPROM Memory Code Protection bit
   583                           ;	CPD = OFF, Data EEPROM code protection off
   584                           ;	Flash Program Memory Write Enable bits
   585                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   586                           ;	In-Circuit Debugger Mode bit
   587                           ;	DEBUG = 0x1, unprogrammed default
   588                           ;	Flash Program Memory Code Protection bit
   589                           ;	CP = OFF, Code protection off
   590  2007                     	org	8199
   591  2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_seq
    _seq->_timer0delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     150
                                _seq
 ---------------------------------------------------------------------------------
 (1) _seq                                                  6     6      0     150
                                              2 COMMON     6     6      0
                        _timer0delay
 ---------------------------------------------------------------------------------
 (2) _timer0delay                                          2     2      0      30
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _seq
     _timer0delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Dec 12 16:05:21 2020

                     l23 07FB                       l40 0775                       l42 0779  
                     l43 077A                       u10 0775                       u11 0774  
                     u20 0779                       u21 0778                       u15 0771  
                     u40 07DB                       u41 07DA                       u34 07BC  
                     u35 07BA                       u60 07FB                       u61 07FA  
                     u45 07D7                       u54 07E5                       u70 078E  
                     u55 07E3                       u71 078D                       u80 07AF  
                     u81 07AE                      l641 0762                      l643 0768  
                    l635 0760                      l645 077A                      l661 07DB  
                    l653 07B6                      l671 07F1                      l655 07C3  
                    l647 07B4                      l673 07F7                      l657 07C8  
                    l681 0786                      l667 07DF                      l659 07CE  
                    l683 078A                      l675 077B                      l669 07EC  
                    l685 078E                      l677 077E                      l687 07A7  
                    l679 0782                      l689 07A9                      _RC0 0038  
                    _seq 07B3                     ?_seq 0070                     _TMR0 0001  
                   _main 077B                     btemp 007E                     seq@j 0074  
                   start 0000                    ??_seq 0072                    ?_main 0070  
                  _PORTD 0008                    _TRISD 0088                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07B3  
                 ??_main 0078                   _TMR0IF 005A                   _TRISC0 0438  
           ?_timer0delay 0070                   seq@get 0073  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 077B     __size_of_timer0delay 001B  
                __ptext1 07B3                  __ptext2 0760             __size_of_seq 0049  
   end_of_initialization 07FC                  seq@j_36 0076      start_initialization 07FC  
            __end_of_seq 07FC                ___latbits 0002            ??_timer0delay 0070  
    __end_of_timer0delay 077B            __size_of_main 0038             timer0delay@i 0070  
            _timer0delay 0760               _OPTION_REG 0081  
