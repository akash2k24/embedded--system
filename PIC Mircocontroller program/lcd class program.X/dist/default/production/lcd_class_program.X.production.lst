

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun Aug 11 14:29:17 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171                           
   172                           	psect	idataBANK0
   173     0716                     __pidataBANK0:
   174                           
   175                           ;initializer for _array
   176     0716  3448               	retlw	72
   177     0717  3445               	retlw	69
   178     0718  344C               	retlw	76
   179     0719  344C               	retlw	76
   180     071A  344F               	retlw	79
   181     071B  3420               	retlw	32
   182     071C  3457               	retlw	87
   183     071D  344F               	retlw	79
   184     071E  3452               	retlw	82
   185     071F  344C               	retlw	76
   186     0720  3444               	retlw	68
   187     0008                     _PORTD	set	8
   188     0007                     _PORTC	set	7
   189     0088                     _TRISD	set	136
   190     0087                     _TRISC	set	135
   191                           
   192                           	psect	cinit
   193     07EA                     start_initialization:	
   194                           ; #config settings
   195                           
   196     07EA                     __initialization:
   197                           
   198                           ; Initialize objects allocated to BANK0
   199     07EA  1383               	bcf	3,7	;select IRP bank0
   200     07EB  302B               	movlw	low (__pdataBANK0+11)
   201     07EC  00FD               	movwf	btemp+-1
   202     07ED  3007               	movlw	high __pidataBANK0
   203     07EE  00FE               	movwf	btemp
   204     07EF  3016               	movlw	low __pidataBANK0
   205     07F0  00FF               	movwf	btemp+1
   206     07F1  3020               	movlw	low __pdataBANK0
   207     07F2  0084               	movwf	4
   208     07F3  120A  118A  2725  120A  118A  	fcall	init_ram0
   209                           
   210                           ; Clear objects allocated to COMMON
   211     07F8  01F5               	clrf	__pbssCOMMON& (0+127)
   212     07F9  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   213     07FA  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   214     07FB  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   215     07FC                     end_of_initialization:	
   216                           ;End of C runtime variable initialization code
   217                           
   218     07FC                     __end_of__initialization:
   219     07FC  0183               	clrf	3
   220     07FD  120A  118A  2F5F   	ljmp	_main	;jump to C main() function
   221                           
   222                           	psect	bssCOMMON
   223     0075                     __pbssCOMMON:
   224     0075                     _i:
   225     0075                     	ds	1
   226     0076                     _m:
   227     0076                     	ds	1
   228     0077                     _n:
   229     0077                     	ds	1
   230     0078                     _X:
   231     0078                     	ds	1
   232                           
   233                           	psect	dataBANK0
   234     0020                     __pdataBANK0:
   235     0020                     _array:
   236     0020                     	ds	11
   237                           
   238                           	psect	inittext
   239     0721                     init_fetch0:	
   240                           ;	Called with low address in FSR and high address in W
   241                           
   242     0721  087E               	movf	btemp,w
   243     0722  008A               	movwf	10
   244     0723  087F               	movf	btemp+1,w
   245     0724  0082               	movwf	2
   246     0725                     init_ram0:	
   247                           ;Called with:
   248                           ;	high address of idata address in btemp 
   249                           ;	low address of idata address in btemp+1 
   250                           ;	low address of data in FSR
   251                           ;	high address + 1 of data in btemp-1
   252                           
   253     0725  120A  118A  2721  120A  118A  	fcall	init_fetch0
   254     072A  0080               	movwf	0
   255     072B  0A84               	incf	4,f
   256     072C  0804               	movf	4,w
   257     072D  067D               	xorwf	btemp+-1,w
   258     072E  1903               	btfsc	3,2
   259     072F  3400               	retlw	0
   260     0730  0AFF               	incf	btemp+1,f
   261     0731  1903               	btfsc	3,2
   262     0732  0AFE               	incf	btemp,f
   263     0733  2F25               	goto	init_ram0
   264                           
   265                           	psect	cstackCOMMON
   266     0070                     __pcstackCOMMON:
   267     0070                     ?_init:
   268     0070                     ?_Lcd_Command:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     0070                     ??_Lcd_Command:	
   272                           ; 1 bytes @ 0x0
   273                           
   274     0070                     ?_Lcd_Data:	
   275                           ; 1 bytes @ 0x0
   276                           
   277     0070                     ??_Lcd_Data:	
   278                           ; 1 bytes @ 0x0
   279                           
   280     0070                     ?_main:	
   281                           ; 1 bytes @ 0x0
   282                           
   283                           
   284                           ; 1 bytes @ 0x0
   285     0070                     	ds	2
   286     0072                     Lcd_Data@i:
   287     0072                     Lcd_Command@i:	
   288                           ; 1 bytes @ 0x2
   289                           
   290                           
   291                           ; 1 bytes @ 0x2
   292     0072                     	ds	1
   293     0073                     ??_init:
   294                           
   295                           ; 1 bytes @ 0x3
   296     0073                     	ds	2
   297     0075                     ??_main:
   298                           
   299                           	psect	maintext
   300     075F                     __pmaintext:	
   301                           ; 1 bytes @ 0x5
   302 ;;
   303 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   304 ;;
   305 ;; *************** function _main *****************
   306 ;; Defined at:
   307 ;;		line 17 in file "LCD.c"
   308 ;; Parameters:    Size  Location     Type
   309 ;;		None
   310 ;; Auto vars:     Size  Location     Type
   311 ;;		None
   312 ;; Return value:  Size  Location     Type
   313 ;;                  1    wreg      void 
   314 ;; Registers used:
   315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   316 ;; Tracked objects:
   317 ;;		On entry : B00/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   321 ;;      Params:         0       0       0       0       0
   322 ;;      Locals:         0       0       0       0       0
   323 ;;      Temps:          0       0       0       0       0
   324 ;;      Totals:         0       0       0       0       0
   325 ;;Total ram usage:        0 bytes
   326 ;; Hardware stack levels required when called: 2
   327 ;; This function calls:
   328 ;;		_Lcd_Command
   329 ;;		_Lcd_Data
   330 ;;		_init
   331 ;; This function is called by:
   332 ;;		Startup code after reset
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336     075F                     _main:	
   337                           ;psect for function _main
   338                           
   339     075F                     l699:	
   340                           ;incstack = 0
   341                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   342                           
   343                           
   344                           ;LCD.c: 19:     init();
   345     075F  120A  118A  2783  120A  118A  	fcall	_init
   346                           
   347                           ;LCD.c: 20:     Lcd_Command(0x80);
   348     0764  3080               	movlw	128
   349     0765  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   350     076A                     l701:
   351                           
   352                           ;LCD.c: 21:     for(X=0;X<11;X++)
   353     076A  01F8               	clrf	_X
   354     076B                     l707:
   355                           
   356                           ;LCD.c: 22:     {;LCD.c: 23:         Lcd_Data(array[X]);
   357     076B  0878               	movf	_X,w
   358     076C  3E20               	addlw	(low (_array| 0))& (0+255)
   359     076D  0084               	movwf	4
   360     076E  1383               	bcf	3,7	;select IRP bank0
   361     076F  0800               	movf	0,w
   362     0770  120A  118A  2734  120A  118A  	fcall	_Lcd_Data
   363     0775                     l709:
   364                           
   365                           ;LCD.c: 24:     }
   366     0775  3001               	movlw	1
   367     0776  00FF               	movwf	btemp+1
   368     0777  087F               	movf	btemp+1,w
   369     0778  07F8               	addwf	_X,f
   370     0779                     l711:
   371     0779  300B               	movlw	11
   372     077A  0278               	subwf	_X,w
   373     077B  1C03               	skipc
   374     077C  2F7E               	goto	u21
   375     077D  2F7F               	goto	u20
   376     077E                     u21:
   377     077E  2F6B               	goto	l707
   378     077F                     u20:
   379     077F                     l33:	
   380                           ;LCD.c: 25:     while(1);
   381                           
   382     077F  2F7F               	goto	l33
   383     0780  120A  118A  2800   	ljmp	start
   384     0783                     __end_of_main:
   385                           
   386                           	psect	text1
   387     0783                     __ptext1:	
   388 ;; *************** function _init *****************
   389 ;; Defined at:
   390 ;;		line 27 in file "LCD.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;		None
   393 ;; Auto vars:     Size  Location     Type
   394 ;;		None
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   404 ;;      Params:         0       0       0       0       0
   405 ;;      Locals:         0       0       0       0       0
   406 ;;      Temps:          2       0       0       0       0
   407 ;;      Totals:         2       0       0       0       0
   408 ;;Total ram usage:        2 bytes
   409 ;; Hardware stack levels used: 1
   410 ;; Hardware stack levels required when called: 1
   411 ;; This function calls:
   412 ;;		_Lcd_Command
   413 ;; This function is called by:
   414 ;;		_main
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418     0783                     _init:	
   419                           ;psect for function _init
   420                           
   421     0783                     l659:	
   422                           ;incstack = 0
   423                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   424                           
   425                           
   426                           ;LCD.c: 29:     TRISC=0x00;
   427     0783  1683               	bsf	3,5	;RP0=1, select bank1
   428     0784  1303               	bcf	3,6	;RP1=0, select bank1
   429     0785  0187               	clrf	7	;volatile
   430                           
   431                           ;LCD.c: 30:     TRISD=0x00;
   432     0786  0188               	clrf	8	;volatile
   433     0787                     l661:
   434                           
   435                           ;LCD.c: 31:     Lcd_Command(0x30);
   436     0787  3030               	movlw	48
   437     0788  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   438     078D                     l663:
   439                           
   440                           ;LCD.c: 32:     _delay((unsigned long)((100)*(6000000/4000.0)));
   441     078D  30C3               	movlw	195
   442     078E  00F4               	movwf	??_init+1
   443     078F  30CD               	movlw	205
   444     0790  00F3               	movwf	??_init
   445     0791                     u37:
   446     0791  0BF3               	decfsz	??_init,f
   447     0792  2F91               	goto	u37
   448     0793  0BF4               	decfsz	??_init+1,f
   449     0794  2F91               	goto	u37
   450     0795                     l665:
   451                           
   452                           ;LCD.c: 33:     Lcd_Command(0x30);
   453     0795  3030               	movlw	48
   454     0796  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   455     079B                     l667:
   456                           
   457                           ;LCD.c: 34:     _delay((unsigned long)((100)*(6000000/4000.0)));
   458     079B  30C3               	movlw	195
   459     079C  00F4               	movwf	??_init+1
   460     079D  30CD               	movlw	205
   461     079E  00F3               	movwf	??_init
   462     079F                     u47:
   463     079F  0BF3               	decfsz	??_init,f
   464     07A0  2F9F               	goto	u47
   465     07A1  0BF4               	decfsz	??_init+1,f
   466     07A2  2F9F               	goto	u47
   467     07A3                     l669:
   468                           
   469                           ;LCD.c: 35:     Lcd_Command(0x30);
   470     07A3  3030               	movlw	48
   471     07A4  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   472     07A9                     l671:
   473                           
   474                           ;LCD.c: 36:     _delay((unsigned long)((100)*(6000000/4000.0)));
   475     07A9  30C3               	movlw	195
   476     07AA  00F4               	movwf	??_init+1
   477     07AB  30CD               	movlw	205
   478     07AC  00F3               	movwf	??_init
   479     07AD                     u57:
   480     07AD  0BF3               	decfsz	??_init,f
   481     07AE  2FAD               	goto	u57
   482     07AF  0BF4               	decfsz	??_init+1,f
   483     07B0  2FAD               	goto	u57
   484     07B1                     l673:
   485                           
   486                           ;LCD.c: 37:     Lcd_Command(0x30);
   487     07B1  3030               	movlw	48
   488     07B2  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   489     07B7                     l675:
   490                           
   491                           ;LCD.c: 38:     _delay((unsigned long)((100)*(6000000/4000.0)));
   492     07B7  30C3               	movlw	195
   493     07B8  00F4               	movwf	??_init+1
   494     07B9  30CD               	movlw	205
   495     07BA  00F3               	movwf	??_init
   496     07BB                     u67:
   497     07BB  0BF3               	decfsz	??_init,f
   498     07BC  2FBB               	goto	u67
   499     07BD  0BF4               	decfsz	??_init+1,f
   500     07BE  2FBB               	goto	u67
   501     07BF                     l677:
   502                           
   503                           ;LCD.c: 39:     Lcd_Command(0x06);
   504     07BF  3006               	movlw	6
   505     07C0  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   506     07C5                     l679:
   507                           
   508                           ;LCD.c: 40:     _delay((unsigned long)((100)*(6000000/4000.0)));
   509     07C5  30C3               	movlw	195
   510     07C6  00F4               	movwf	??_init+1
   511     07C7  30CD               	movlw	205
   512     07C8  00F3               	movwf	??_init
   513     07C9                     u77:
   514     07C9  0BF3               	decfsz	??_init,f
   515     07CA  2FC9               	goto	u77
   516     07CB  0BF4               	decfsz	??_init+1,f
   517     07CC  2FC9               	goto	u77
   518     07CD                     l681:
   519                           
   520                           ;LCD.c: 41:     Lcd_Command(0x0c);
   521     07CD  300C               	movlw	12
   522     07CE  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   523     07D3                     l683:
   524                           
   525                           ;LCD.c: 42:     _delay((unsigned long)((100)*(6000000/4000.0)));
   526     07D3  30C3               	movlw	195
   527     07D4  00F4               	movwf	??_init+1
   528     07D5  30CD               	movlw	205
   529     07D6  00F3               	movwf	??_init
   530     07D7                     u87:
   531     07D7  0BF3               	decfsz	??_init,f
   532     07D8  2FD7               	goto	u87
   533     07D9  0BF4               	decfsz	??_init+1,f
   534     07DA  2FD7               	goto	u87
   535     07DB                     l685:
   536                           
   537                           ;LCD.c: 43:     Lcd_Command(0x01);
   538     07DB  3001               	movlw	1
   539     07DC  120A  118A  2748  120A  118A  	fcall	_Lcd_Command
   540     07E1                     l687:
   541                           
   542                           ;LCD.c: 44:     _delay((unsigned long)((100)*(6000000/4000.0)));
   543     07E1  30C3               	movlw	195
   544     07E2  00F4               	movwf	??_init+1
   545     07E3  30CD               	movlw	205
   546     07E4  00F3               	movwf	??_init
   547     07E5                     u97:
   548     07E5  0BF3               	decfsz	??_init,f
   549     07E6  2FE5               	goto	u97
   550     07E7  0BF4               	decfsz	??_init+1,f
   551     07E8  2FE5               	goto	u97
   552     07E9                     l39:
   553     07E9  0008               	return
   554     07EA                     __end_of_init:
   555                           
   556                           	psect	text2
   557     0748                     __ptext2:	
   558 ;; *************** function _Lcd_Command *****************
   559 ;; Defined at:
   560 ;;		line 54 in file "LCD.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  i               1    wreg     unsigned char 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  i               1    2[COMMON] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0, btemp+1
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         0       0       0       0       0
   575 ;;      Locals:         1       0       0       0       0
   576 ;;      Temps:          2       0       0       0       0
   577 ;;      Totals:         3       0       0       0       0
   578 ;;Total ram usage:        3 bytes
   579 ;; Hardware stack levels used: 1
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_main
   584 ;;		_init
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588     0748                     _Lcd_Command:	
   589                           ;psect for function _Lcd_Command
   590                           
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+btemp+1]
   594                           ;Lcd_Command@i stored from wreg
   595     0748  00F2               	movwf	Lcd_Command@i
   596     0749                     l651:
   597                           
   598                           ;LCD.c: 54: void Lcd_Command(unsigned char i);LCD.c: 55: {;LCD.c: 56:     PORTC&=~0x08;
   599     0749  30F7               	movlw	247
   600     074A  00FF               	movwf	btemp+1
   601     074B  087F               	movf	btemp+1,w
   602     074C  1283               	bcf	3,5	;RP0=0, select bank0
   603     074D  1303               	bcf	3,6	;RP1=0, select bank0
   604     074E  0587               	andwf	7,f	;volatile
   605     074F                     l653:
   606                           
   607                           ;LCD.c: 57:     PORTD =i;
   608     074F  0872               	movf	Lcd_Command@i,w
   609     0750  0088               	movwf	8	;volatile
   610     0751                     l655:
   611                           
   612                           ;LCD.c: 58:     PORTC|=0x01;
   613     0751  1407               	bsf	7,0	;volatile
   614     0752                     l657:
   615                           
   616                           ;LCD.c: 59:     PORTC&=~0x01;
   617     0752  30FE               	movlw	254
   618     0753  00FF               	movwf	btemp+1
   619     0754  087F               	movf	btemp+1,w
   620     0755  0587               	andwf	7,f	;volatile
   621                           
   622                           ;LCD.c: 60:     _delay((unsigned long)((100)*(6000000/4000.0)));
   623     0756  30C3               	movlw	195
   624     0757  00F1               	movwf	??_Lcd_Command+1
   625     0758  30CD               	movlw	205
   626     0759  00F0               	movwf	??_Lcd_Command
   627     075A                     u107:
   628     075A  0BF0               	decfsz	??_Lcd_Command,f
   629     075B  2F5A               	goto	u107
   630     075C  0BF1               	decfsz	??_Lcd_Command+1,f
   631     075D  2F5A               	goto	u107
   632     075E                     l45:
   633     075E  0008               	return
   634     075F                     __end_of_Lcd_Command:
   635                           
   636                           	psect	text3
   637     0734                     __ptext3:	
   638 ;; *************** function _Lcd_Data *****************
   639 ;; Defined at:
   640 ;;		line 46 in file "LCD.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  i               1    wreg     unsigned char 
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  i               1    2[COMMON] unsigned char 
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, status,2, status,0, btemp+1
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   654 ;;      Params:         0       0       0       0       0
   655 ;;      Locals:         1       0       0       0       0
   656 ;;      Temps:          2       0       0       0       0
   657 ;;      Totals:         3       0       0       0       0
   658 ;;Total ram usage:        3 bytes
   659 ;; Hardware stack levels used: 1
   660 ;; This function calls:
   661 ;;		Nothing
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667     0734                     _Lcd_Data:	
   668                           ;psect for function _Lcd_Data
   669                           
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _Lcd_Data: [wreg+status,2+status,0+btemp+1]
   673                           ;Lcd_Data@i stored from wreg
   674     0734  00F2               	movwf	Lcd_Data@i
   675     0735                     l689:
   676                           
   677                           ;LCD.c: 46: void Lcd_Data(unsigned char i);LCD.c: 47: {;LCD.c: 48:     PORTC|=0x08;
   678     0735  1283               	bcf	3,5	;RP0=0, select bank0
   679     0736  1303               	bcf	3,6	;RP1=0, select bank0
   680     0737  1587               	bsf	7,3	;volatile
   681     0738                     l691:
   682                           
   683                           ;LCD.c: 49:     PORTD=i;
   684     0738  0872               	movf	Lcd_Data@i,w
   685     0739  0088               	movwf	8	;volatile
   686     073A                     l693:
   687                           
   688                           ;LCD.c: 50:     PORTC|=0x01;
   689     073A  1407               	bsf	7,0	;volatile
   690     073B                     l695:
   691                           
   692                           ;LCD.c: 51:     PORTC&=~0x01;
   693     073B  30FE               	movlw	254
   694     073C  00FF               	movwf	btemp+1
   695     073D  087F               	movf	btemp+1,w
   696     073E  0587               	andwf	7,f	;volatile
   697     073F                     l697:
   698                           
   699                           ;LCD.c: 52:     _delay((unsigned long)((100)*(6000000/4000.0)));
   700     073F  30C3               	movlw	195
   701     0740  00F1               	movwf	??_Lcd_Data+1
   702     0741  30CD               	movlw	205
   703     0742  00F0               	movwf	??_Lcd_Data
   704     0743                     u117:
   705     0743  0BF0               	decfsz	??_Lcd_Data,f
   706     0744  2F43               	goto	u117
   707     0745  0BF1               	decfsz	??_Lcd_Data+1,f
   708     0746  2F43               	goto	u117
   709     0747                     l42:
   710     0747  0008               	return
   711     0748                     __end_of_Lcd_Data:
   712     007E                     btemp	set	126	;btemp
   713     007E                     wtemp0	set	126
   714                           
   715                           	psect	config
   716                           
   717                           ;Config register CONFIG @ 0x2007
   718                           ;	Oscillator Selection bits
   719                           ;	FOSC = EXTRC, RC oscillator
   720                           ;	Watchdog Timer Enable bit
   721                           ;	WDTE = OFF, WDT disabled
   722                           ;	Power-up Timer Enable bit
   723                           ;	PWRTE = OFF, PWRT disabled
   724                           ;	Brown-out Reset Enable bit
   725                           ;	BOREN = OFF, BOR disabled
   726                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   727                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   728                           ;	Data EEPROM Memory Code Protection bit
   729                           ;	CPD = OFF, Data EEPROM code protection off
   730                           ;	Flash Program Memory Write Enable bits
   731                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   732                           ;	In-Circuit Debugger Mode bit
   733                           ;	DEBUG = 0x1, unprogrammed default
   734                           ;	Flash Program Memory Code Protection bit
   735                           ;	CP = OFF, Code protection off
   736     2007                     	org	8199
   737     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80      0      11
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_Lcd_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      66
                        _Lcd_Command
                           _Lcd_Data
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Command
   _Lcd_Data
   _init
     _Lcd_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       B       5       13.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      14      12        0.0%
ABS                  0      0      14       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun Aug 11 14:29:17 2024

                      _X 0078                        _i 0075                        _m 0076  
                      _n 0077                        pc 0002                       l33 077F  
                     l42 0747                       l45 075E                       l39 07E9  
                     u20 077F                       u21 077E                       u37 0791  
                     u47 079F                       u57 07AD                       u67 07BB  
                     u77 07C9                       u87 07D7                       u97 07E5  
                     fsr 0004                      l701 076A                      l711 0779  
                    l651 0749                      l707 076B                      l653 074F  
                    l661 0787                      l709 0775                      l655 0751  
                    l671 07A9                      l663 078D                      l657 0752  
                    l681 07CD                      l673 07B1                      l665 0795  
                    l691 0738                      l683 07D3                      l675 07B7  
                    l667 079B                      l659 0783                      l693 073A  
                    l685 07DB                      l677 07BF                      l669 07A3  
                    l695 073B                      l687 07E1                      l679 07C5  
                    l697 073F                      l689 0735                      l699 075F  
                    u107 075A                      u117 0743                      fsr0 0004  
                    indf 0000      __end_of_Lcd_Command 075F                     _main 075F  
                   _init 0783                     btemp 007E                     start 0000  
                  ?_main 0070                    ?_init 0070                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _array 0020                    pclath 000A                    status 0003  
                  wtemp0 007E         __end_of_Lcd_Data 0748          __initialization 07EA  
           __end_of_main 0783             __end_of_init 07EA              _Lcd_Command 0748  
                 ??_main 0075                   ??_init 0073  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 0716                ?_Lcd_Data 0070  
             __pmaintext 075F               ??_Lcd_Data 0070             ?_Lcd_Command 0070  
                __ptext1 0783                  __ptext2 0748                  __ptext3 0734  
   end_of_initialization 07FC                Lcd_Data@i 0072      start_initialization 07EA  
             init_fetch0 0721              __pdataBANK0 0020              __pbssCOMMON 0075  
              ___latbits 0002             Lcd_Command@i 0072                 _Lcd_Data 0734  
               init_ram0 0725            ??_Lcd_Command 0070  
