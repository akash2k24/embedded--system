

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jul 16 18:17:50 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172     0008                     _PORTD	set	8
   173     0007                     _PORTC	set	7
   174     0088                     _TRISD	set	136
   175     0087                     _TRISC	set	135
   176                           
   177                           	psect	cinit
   178     07F3                     start_initialization:	
   179                           ; #config settings
   180                           
   181     07F3                     __initialization:
   182                           
   183                           ; Clear objects allocated to BANK0
   184     07F3  1383               	bcf	3,7	;select IRP bank0
   185     07F4  3020               	movlw	low __pbssBANK0
   186     07F5  0084               	movwf	4
   187     07F6  303A               	movlw	low (__pbssBANK0+26)
   188     07F7  120A  118A  2635  120A  118A  	fcall	clear_ram0
   189     07FC                     end_of_initialization:	
   190                           ;End of C runtime variable initialization code
   191                           
   192     07FC                     __end_of__initialization:
   193     07FC  0183               	clrf	3
   194     07FD  120A  118A  2EC1   	ljmp	_main	;jump to C main() function
   195                           
   196                           	psect	bssBANK0
   197     0020                     __pbssBANK0:
   198     0020                     _k:
   199     0020                     	ds	10
   200     002A                     _n:
   201     002A                     	ds	2
   202     002C                     _m:
   203     002C                     	ds	2
   204     002E                     _delaycount:
   205     002E                     	ds	2
   206     0030                     _sum:
   207     0030                     	ds	2
   208     0032                     _num2:
   209     0032                     	ds	2
   210     0034                     _num1:
   211     0034                     	ds	2
   212     0036                     _plus:
   213     0036                     	ds	1
   214     0037                     _Equal:
   215     0037                     	ds	1
   216     0038                     _j:
   217     0038                     	ds	1
   218     0039                     _s:
   219     0039                     	ds	1
   220                           
   221                           	psect	clrtext
   222     0635                     clear_ram0:	
   223                           ;	Called with FSR containing the base address, and
   224                           ;	W with the last address+1
   225                           
   226     0635  0064               	clrwdt	;clear the watchdog before getting into this loop
   227     0636                     clrloop0:
   228     0636  0180               	clrf	0	;clear RAM location pointed to by FSR
   229     0637  0A84               	incf	4,f	;increment pointer
   230     0638  0604               	xorwf	4,w	;XOR with final address
   231     0639  1903               	btfsc	3,2	;have we reached the end yet?
   232     063A  3400               	retlw	0	;all done for this memory range, return
   233     063B  0604               	xorwf	4,w	;XOR again to restore value
   234     063C  2E36               	goto	clrloop0	;do the next byte
   235                           
   236                           	psect	cstackCOMMON
   237     0070                     __pcstackCOMMON:
   238     0070                     ?_init:
   239     0070                     ?_Lcd_Command:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ??_Lcd_Command:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ?_Lcd_Data:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ??_Lcd_Data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_main:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?___lwdiv:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ___lwdiv@divisor:	
   258                           ; 2 bytes @ 0x0
   259                           
   260                           
   261                           ; 2 bytes @ 0x0
   262     0070                     	ds	2
   263     0072                     Lcd_Data@i:
   264     0072                     Lcd_Command@i:	
   265                           ; 1 bytes @ 0x2
   266                           
   267     0072                     ___lwdiv@dividend:	
   268                           ; 1 bytes @ 0x2
   269                           
   270                           
   271                           ; 2 bytes @ 0x2
   272     0072                     	ds	1
   273     0073                     ??_init:
   274                           
   275                           ; 1 bytes @ 0x3
   276     0073                     	ds	1
   277     0074                     ??___lwdiv:
   278     0074                     ___lwdiv@quotient:	
   279                           ; 1 bytes @ 0x4
   280                           
   281                           
   282                           ; 2 bytes @ 0x4
   283     0074                     	ds	2
   284     0076                     ___lwdiv@counter:
   285                           
   286                           ; 1 bytes @ 0x6
   287     0076                     	ds	1
   288     0077                     ?___bmul:
   289     0077                     ___bmul@multiplicand:	
   290                           ; 1 bytes @ 0x7
   291                           
   292                           
   293                           ; 1 bytes @ 0x7
   294     0077                     	ds	1
   295     0078                     ??___bmul:
   296     0078                     ___bmul@product:	
   297                           ; 1 bytes @ 0x8
   298                           
   299                           
   300                           ; 1 bytes @ 0x8
   301     0078                     	ds	1
   302     0079                     ___bmul@multiplier:
   303                           
   304                           ; 1 bytes @ 0x9
   305     0079                     	ds	1
   306     007A                     ?_Lcdoutput:
   307     007A                     Lcdoutput@i:	
   308                           ; 1 bytes @ 0xA
   309                           
   310                           
   311                           ; 2 bytes @ 0xA
   312     007A                     	ds	2
   313     007C                     ??_Lcdoutput:
   314     007C                     Lcdoutput@s:	
   315                           ; 1 bytes @ 0xC
   316                           
   317                           
   318                           ; 1 bytes @ 0xC
   319     007C                     	ds	1
   320     007D                     Lcdoutput@j:
   321                           
   322                           ; 1 bytes @ 0xD
   323     007D                     	ds	1
   324     007E                     ??_main:
   325                           
   326                           	psect	maintext
   327     06C1                     __pmaintext:	
   328                           ; 1 bytes @ 0xE
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 27 in file "Lcd_twonumadd_program.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;		None
   339 ;; Return value:  Size  Location     Type
   340 ;;                  1    wreg      void 
   341 ;; Registers used:
   342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   343 ;; Tracked objects:
   344 ;;		On entry : B00/0
   345 ;;		On exit  : 0/0
   346 ;;		Unchanged: 0/0
   347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   348 ;;      Params:         0       0       0       0       0
   349 ;;      Locals:         0       0       0       0       0
   350 ;;      Temps:          0       0       0       0       0
   351 ;;      Totals:         0       0       0       0       0
   352 ;;Total ram usage:        0 bytes
   353 ;; Hardware stack levels required when called: 2
   354 ;; This function calls:
   355 ;;		_Lcd_Command
   356 ;;		_Lcd_Data
   357 ;;		_Lcdoutput
   358 ;;		_init
   359 ;; This function is called by:
   360 ;;		Startup code after reset
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364     06C1                     _main:	
   365                           ;psect for function _main
   366                           
   367     06C1                     l880:	
   368                           ;incstack = 0
   369                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   370                           
   371                           
   372                           ;Lcd_twonumadd_program.c: 29:     init();
   373     06C1  120A  118A  2723  120A  118A  	fcall	_init
   374     06C6                     l882:
   375                           
   376                           ;Lcd_twonumadd_program.c: 30:     num1=238;
   377     06C6  30EE               	movlw	238
   378     06C7  1283               	bcf	3,5	;RP0=0, select bank0
   379     06C8  1303               	bcf	3,6	;RP1=0, select bank0
   380     06C9  00B4               	movwf	_num1
   381     06CA  3000               	movlw	0
   382     06CB  00B5               	movwf	_num1+1
   383     06CC                     l884:
   384                           
   385                           ;Lcd_twonumadd_program.c: 31:     num2=523;
   386     06CC  300B               	movlw	11
   387     06CD  00B2               	movwf	_num2
   388     06CE  3002               	movlw	2
   389     06CF  00B3               	movwf	_num2+1
   390     06D0                     l886:
   391                           
   392                           ;Lcd_twonumadd_program.c: 32:     Equal='=';
   393     06D0  303D               	movlw	61
   394     06D1  00B7               	movwf	_Equal
   395     06D2                     l888:
   396                           
   397                           ;Lcd_twonumadd_program.c: 33:     plus='+';
   398     06D2  302B               	movlw	43
   399     06D3  00B6               	movwf	_plus
   400                           
   401                           ;Lcd_twonumadd_program.c: 34:     Lcd_Command(0x80);
   402     06D4  3080               	movlw	128
   403     06D5  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   404     06DA                     l890:
   405                           
   406                           ;Lcd_twonumadd_program.c: 35:     Lcdoutput(num1);
   407     06DA  30EE               	movlw	238
   408     06DB  00FA               	movwf	Lcdoutput@i
   409     06DC  3000               	movlw	0
   410     06DD  00FB               	movwf	Lcdoutput@i+1
   411     06DE  120A  118A  278A  120A  118A  	fcall	_Lcdoutput
   412     06E3                     l892:
   413                           
   414                           ;Lcd_twonumadd_program.c: 36:     Lcd_Command(0x83);
   415     06E3  3083               	movlw	131
   416     06E4  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   417     06E9                     l894:
   418                           
   419                           ;Lcd_twonumadd_program.c: 37:     Lcd_Data(plus);
   420     06E9  302B               	movlw	43
   421     06EA  120A  118A  263D  120A  118A  	fcall	_Lcd_Data
   422     06EF                     l896:
   423                           
   424                           ;Lcd_twonumadd_program.c: 38:     Lcd_Command(0x84);
   425     06EF  3084               	movlw	132
   426     06F0  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   427                           
   428                           ;Lcd_twonumadd_program.c: 39:     Lcdoutput(num2);
   429     06F5  300B               	movlw	11
   430     06F6  00FA               	movwf	Lcdoutput@i
   431     06F7  3002               	movlw	2
   432     06F8  00FB               	movwf	Lcdoutput@i+1
   433     06F9  120A  118A  278A  120A  118A  	fcall	_Lcdoutput
   434     06FE                     l898:
   435                           
   436                           ;Lcd_twonumadd_program.c: 40:     Lcd_Command(0x87);
   437     06FE  3087               	movlw	135
   438     06FF  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   439     0704                     l900:
   440                           
   441                           ;Lcd_twonumadd_program.c: 41:     Lcd_Data(Equal);
   442     0704  303D               	movlw	61
   443     0705  120A  118A  263D  120A  118A  	fcall	_Lcd_Data
   444     070A                     l902:
   445                           
   446                           ;Lcd_twonumadd_program.c: 42:     Lcd_Command(0x88);
   447     070A  3088               	movlw	136
   448     070B  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   449     0710                     l904:
   450                           
   451                           ;Lcd_twonumadd_program.c: 43:     sum=num1+num2;
   452     0710  30F9               	movlw	249
   453     0711  1283               	bcf	3,5	;RP0=0, select bank0
   454     0712  1303               	bcf	3,6	;RP1=0, select bank0
   455     0713  00B0               	movwf	_sum
   456     0714  3002               	movlw	2
   457     0715  00B1               	movwf	_sum+1
   458     0716                     l906:
   459                           
   460                           ;Lcd_twonumadd_program.c: 44:     Lcdoutput(sum);
   461     0716  30F9               	movlw	249
   462     0717  00FA               	movwf	Lcdoutput@i
   463     0718  3002               	movlw	2
   464     0719  00FB               	movwf	Lcdoutput@i+1
   465     071A  120A  118A  278A  120A  118A  	fcall	_Lcdoutput
   466     071F                     l45:	
   467                           ;Lcd_twonumadd_program.c: 45:     while(1);
   468                           
   469     071F                     l46:
   470     071F  2F1F               	goto	l45
   471     0720  120A  118A  2800   	ljmp	start
   472     0723                     __end_of_main:
   473                           
   474                           	psect	text1
   475     0723                     __ptext1:	
   476 ;; *************** function _init *****************
   477 ;; Defined at:
   478 ;;		line 47 in file "Lcd_twonumadd_program.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0
   494 ;;      Temps:          2       0       0       0       0
   495 ;;      Totals:         2       0       0       0       0
   496 ;;Total ram usage:        2 bytes
   497 ;; Hardware stack levels used: 1
   498 ;; Hardware stack levels required when called: 1
   499 ;; This function calls:
   500 ;;		_Lcd_Command
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506     0723                     _init:	
   507                           ;psect for function _init
   508                           
   509     0723                     l824:	
   510                           ;incstack = 0
   511                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   512                           
   513                           
   514                           ;Lcd_twonumadd_program.c: 49:     TRISC=0x00;
   515     0723  1683               	bsf	3,5	;RP0=1, select bank1
   516     0724  1303               	bcf	3,6	;RP1=0, select bank1
   517     0725  0187               	clrf	7	;volatile
   518                           
   519                           ;Lcd_twonumadd_program.c: 50:     TRISD=0x00;
   520     0726  0188               	clrf	8	;volatile
   521     0727                     l826:
   522                           
   523                           ;Lcd_twonumadd_program.c: 51:     Lcd_Command(0x30);
   524     0727  3030               	movlw	48
   525     0728  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   526     072D                     l828:
   527                           
   528                           ;Lcd_twonumadd_program.c: 52:     _delay((unsigned long)((100)*(6000000/4000.0)));
   529     072D  30C3               	movlw	195
   530     072E  00F4               	movwf	??_init+1
   531     072F  30CD               	movlw	205
   532     0730  00F3               	movwf	??_init
   533     0731                     u247:
   534     0731  0BF3               	decfsz	??_init,f
   535     0732  2F31               	goto	u247
   536     0733  0BF4               	decfsz	??_init+1,f
   537     0734  2F31               	goto	u247
   538     0735                     l830:
   539                           
   540                           ;Lcd_twonumadd_program.c: 53:     Lcd_Command(0x30);
   541     0735  3030               	movlw	48
   542     0736  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   543     073B                     l832:
   544                           
   545                           ;Lcd_twonumadd_program.c: 54:     _delay((unsigned long)((100)*(6000000/4000.0)));
   546     073B  30C3               	movlw	195
   547     073C  00F4               	movwf	??_init+1
   548     073D  30CD               	movlw	205
   549     073E  00F3               	movwf	??_init
   550     073F                     u257:
   551     073F  0BF3               	decfsz	??_init,f
   552     0740  2F3F               	goto	u257
   553     0741  0BF4               	decfsz	??_init+1,f
   554     0742  2F3F               	goto	u257
   555     0743                     l834:
   556                           
   557                           ;Lcd_twonumadd_program.c: 55:     Lcd_Command(0x30);
   558     0743  3030               	movlw	48
   559     0744  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   560     0749                     l836:
   561                           
   562                           ;Lcd_twonumadd_program.c: 56:     _delay((unsigned long)((100)*(6000000/4000.0)));
   563     0749  30C3               	movlw	195
   564     074A  00F4               	movwf	??_init+1
   565     074B  30CD               	movlw	205
   566     074C  00F3               	movwf	??_init
   567     074D                     u267:
   568     074D  0BF3               	decfsz	??_init,f
   569     074E  2F4D               	goto	u267
   570     074F  0BF4               	decfsz	??_init+1,f
   571     0750  2F4D               	goto	u267
   572     0751                     l838:
   573                           
   574                           ;Lcd_twonumadd_program.c: 57:     Lcd_Command(0x30);
   575     0751  3030               	movlw	48
   576     0752  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   577     0757                     l840:
   578                           
   579                           ;Lcd_twonumadd_program.c: 58:     _delay((unsigned long)((100)*(6000000/4000.0)));
   580     0757  30C3               	movlw	195
   581     0758  00F4               	movwf	??_init+1
   582     0759  30CD               	movlw	205
   583     075A  00F3               	movwf	??_init
   584     075B                     u277:
   585     075B  0BF3               	decfsz	??_init,f
   586     075C  2F5B               	goto	u277
   587     075D  0BF4               	decfsz	??_init+1,f
   588     075E  2F5B               	goto	u277
   589     075F                     l842:
   590                           
   591                           ;Lcd_twonumadd_program.c: 59:     Lcd_Command(0x06);
   592     075F  3006               	movlw	6
   593     0760  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   594     0765                     l844:
   595                           
   596                           ;Lcd_twonumadd_program.c: 60:     _delay((unsigned long)((100)*(6000000/4000.0)));
   597     0765  30C3               	movlw	195
   598     0766  00F4               	movwf	??_init+1
   599     0767  30CD               	movlw	205
   600     0768  00F3               	movwf	??_init
   601     0769                     u287:
   602     0769  0BF3               	decfsz	??_init,f
   603     076A  2F69               	goto	u287
   604     076B  0BF4               	decfsz	??_init+1,f
   605     076C  2F69               	goto	u287
   606     076D                     l846:
   607                           
   608                           ;Lcd_twonumadd_program.c: 61:     Lcd_Command(0x0c);
   609     076D  300C               	movlw	12
   610     076E  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   611     0773                     l848:
   612                           
   613                           ;Lcd_twonumadd_program.c: 62:     _delay((unsigned long)((100)*(6000000/4000.0)));
   614     0773  30C3               	movlw	195
   615     0774  00F4               	movwf	??_init+1
   616     0775  30CD               	movlw	205
   617     0776  00F3               	movwf	??_init
   618     0777                     u297:
   619     0777  0BF3               	decfsz	??_init,f
   620     0778  2F77               	goto	u297
   621     0779  0BF4               	decfsz	??_init+1,f
   622     077A  2F77               	goto	u297
   623     077B                     l850:
   624                           
   625                           ;Lcd_twonumadd_program.c: 63:     Lcd_Command(0x01);
   626     077B  3001               	movlw	1
   627     077C  120A  118A  2666  120A  118A  	fcall	_Lcd_Command
   628     0781                     l852:
   629                           
   630                           ;Lcd_twonumadd_program.c: 64:     _delay((unsigned long)((100)*(6000000/4000.0)));
   631     0781  30C3               	movlw	195
   632     0782  00F4               	movwf	??_init+1
   633     0783  30CD               	movlw	205
   634     0784  00F3               	movwf	??_init
   635     0785                     u307:
   636     0785  0BF3               	decfsz	??_init,f
   637     0786  2F85               	goto	u307
   638     0787  0BF4               	decfsz	??_init+1,f
   639     0788  2F85               	goto	u307
   640     0789                     l51:
   641     0789  0008               	return
   642     078A                     __end_of_init:
   643                           
   644                           	psect	text2
   645     0666                     __ptext2:	
   646 ;; *************** function _Lcd_Command *****************
   647 ;; Defined at:
   648 ;;		line 94 in file "Lcd_twonumadd_program.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  i               1    wreg     unsigned char 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  i               1    2[COMMON] unsigned char 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0, btemp+1
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   662 ;;      Params:         0       0       0       0       0
   663 ;;      Locals:         1       0       0       0       0
   664 ;;      Temps:          2       0       0       0       0
   665 ;;      Totals:         3       0       0       0       0
   666 ;;Total ram usage:        3 bytes
   667 ;; Hardware stack levels used: 1
   668 ;; This function calls:
   669 ;;		Nothing
   670 ;; This function is called by:
   671 ;;		_main
   672 ;;		_init
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676     0666                     _Lcd_Command:	
   677                           ;psect for function _Lcd_Command
   678                           
   679                           
   680                           ;incstack = 0
   681                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+btemp+1]
   682                           ;Lcd_Command@i stored from wreg
   683     0666  00F2               	movwf	Lcd_Command@i
   684     0667                     l764:
   685                           
   686                           ;Lcd_twonumadd_program.c: 94: void Lcd_Command(unsigned char i);Lcd_twonumadd_program.c:
      +                           95: {;Lcd_twonumadd_program.c: 96:     PORTC&=~0x08;
   687     0667  30F7               	movlw	247
   688     0668  00FF               	movwf	btemp+1
   689     0669  087F               	movf	btemp+1,w
   690     066A  1283               	bcf	3,5	;RP0=0, select bank0
   691     066B  1303               	bcf	3,6	;RP1=0, select bank0
   692     066C  0587               	andwf	7,f	;volatile
   693     066D                     l766:
   694                           
   695                           ;Lcd_twonumadd_program.c: 97:     PORTD =i;
   696     066D  0872               	movf	Lcd_Command@i,w
   697     066E  0088               	movwf	8	;volatile
   698     066F                     l768:
   699                           
   700                           ;Lcd_twonumadd_program.c: 98:     PORTC|=0x01;
   701     066F  1407               	bsf	7,0	;volatile
   702     0670                     l770:
   703                           
   704                           ;Lcd_twonumadd_program.c: 99:     PORTC&=~0x01;
   705     0670  30FE               	movlw	254
   706     0671  00FF               	movwf	btemp+1
   707     0672  087F               	movf	btemp+1,w
   708     0673  0587               	andwf	7,f	;volatile
   709                           
   710                           ;Lcd_twonumadd_program.c: 100:     _delay((unsigned long)((100)*(6000000/4000.0)));
   711     0674  30C3               	movlw	195
   712     0675  00F1               	movwf	??_Lcd_Command+1
   713     0676  30CD               	movlw	205
   714     0677  00F0               	movwf	??_Lcd_Command
   715     0678                     u317:
   716     0678  0BF0               	decfsz	??_Lcd_Command,f
   717     0679  2E78               	goto	u317
   718     067A  0BF1               	decfsz	??_Lcd_Command+1,f
   719     067B  2E78               	goto	u317
   720     067C                     l66:
   721     067C  0008               	return
   722     067D                     __end_of_Lcd_Command:
   723                           
   724                           	psect	text3
   725     078A                     __ptext3:	
   726 ;; *************** function _Lcdoutput *****************
   727 ;; Defined at:
   728 ;;		line 66 in file "Lcd_twonumadd_program.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;  i               2   10[COMMON] unsigned int 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  j               1   13[COMMON] unsigned char 
   733 ;;  s               1   12[COMMON] unsigned char 
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   743 ;;      Params:         2       0       0       0       0
   744 ;;      Locals:         2       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0
   746 ;;      Totals:         4       0       0       0       0
   747 ;;Total ram usage:        4 bytes
   748 ;; Hardware stack levels used: 1
   749 ;; Hardware stack levels required when called: 1
   750 ;; This function calls:
   751 ;;		_Lcd_Data
   752 ;;		___bmul
   753 ;;		___lwdiv
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759     078A                     _Lcdoutput:	
   760                           ;psect for function _Lcdoutput
   761                           
   762     078A                     l854:	
   763                           ;incstack = 0
   764                           ; Regs used in _Lcdoutput: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   765                           
   766                           
   767                           ;Lcd_twonumadd_program.c: 66: void Lcdoutput(unsigned int i);Lcd_twonumadd_program.c: 67
      +                          : {;Lcd_twonumadd_program.c: 68:     unsigned char s,j=1;
   768     078A  01FD               	clrf	Lcdoutput@j
   769     078B  0AFD               	incf	Lcdoutput@j,f
   770     078C                     l856:
   771                           
   772                           ;Lcd_twonumadd_program.c: 69:     m=i;
   773     078C  087B               	movf	Lcdoutput@i+1,w
   774     078D  1283               	bcf	3,5	;RP0=0, select bank0
   775     078E  1303               	bcf	3,6	;RP1=0, select bank0
   776     078F  00AD               	movwf	_m+1
   777     0790  087A               	movf	Lcdoutput@i,w
   778     0791  00AC               	movwf	_m
   779                           
   780                           ;Lcd_twonumadd_program.c: 70:     while(m!=0)
   781     0792  2FC9               	goto	l866
   782     0793                     l858:
   783                           
   784                           ;Lcd_twonumadd_program.c: 71:     {;Lcd_twonumadd_program.c: 72:         s = m-((m/10)*1
      +                          0);
   785     0793  30F6               	movlw	246
   786     0794  00F7               	movwf	___bmul@multiplicand
   787     0795  082D               	movf	_m+1,w
   788     0796  00F3               	movwf	___lwdiv@dividend+1
   789     0797  082C               	movf	_m,w
   790     0798  00F2               	movwf	___lwdiv@dividend
   791     0799  300A               	movlw	10
   792     079A  00F0               	movwf	___lwdiv@divisor
   793     079B  3000               	movlw	0
   794     079C  00F1               	movwf	___lwdiv@divisor+1
   795     079D  120A  118A  267D  120A  118A  	fcall	___lwdiv
   796     07A2  0870               	movf	?___lwdiv,w
   797     07A3  120A  118A  2651  120A  118A  	fcall	___bmul
   798     07A8  1283               	bcf	3,5	;RP0=0, select bank0
   799     07A9  1303               	bcf	3,6	;RP1=0, select bank0
   800     07AA  072C               	addwf	_m,w
   801     07AB  00FC               	movwf	Lcdoutput@s
   802     07AC                     l860:
   803                           
   804                           ;Lcd_twonumadd_program.c: 73:         k[j]=s;
   805     07AC  087D               	movf	Lcdoutput@j,w
   806     07AD  3E20               	addlw	(low (_k| 0))& (0+255)
   807     07AE  0084               	movwf	4
   808     07AF  087C               	movf	Lcdoutput@s,w
   809     07B0  1383               	bcf	3,7	;select IRP bank0
   810     07B1  0080               	movwf	0
   811     07B2                     l862:
   812                           
   813                           ;Lcd_twonumadd_program.c: 74:         j++;
   814     07B2  3001               	movlw	1
   815     07B3  00FF               	movwf	btemp+1
   816     07B4  087F               	movf	btemp+1,w
   817     07B5  07FD               	addwf	Lcdoutput@j,f
   818     07B6                     l864:
   819                           
   820                           ;Lcd_twonumadd_program.c: 75:         m=m/10;
   821     07B6  300A               	movlw	10
   822     07B7  00F0               	movwf	___lwdiv@divisor
   823     07B8  3000               	movlw	0
   824     07B9  00F1               	movwf	___lwdiv@divisor+1
   825     07BA  082D               	movf	_m+1,w
   826     07BB  00F3               	movwf	___lwdiv@dividend+1
   827     07BC  082C               	movf	_m,w
   828     07BD  00F2               	movwf	___lwdiv@dividend
   829     07BE  120A  118A  267D  120A  118A  	fcall	___lwdiv
   830     07C3  0871               	movf	?___lwdiv+1,w
   831     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   832     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   833     07C6  00AD               	movwf	_m+1
   834     07C7  0870               	movf	?___lwdiv,w
   835     07C8  00AC               	movwf	_m
   836     07C9                     l866:
   837                           
   838                           ;Lcd_twonumadd_program.c: 70:     while(m!=0)
   839     07C9  082C               	movf	_m,w
   840     07CA  042D               	iorwf	_m+1,w
   841     07CB  1D03               	btfss	3,2
   842     07CC  2FCE               	goto	u221
   843     07CD  2FCF               	goto	u220
   844     07CE                     u221:
   845     07CE  2F93               	goto	l858
   846     07CF                     u220:
   847     07CF                     l868:
   848                           
   849                           ;Lcd_twonumadd_program.c: 77:     k[j]='\0';
   850     07CF  087D               	movf	Lcdoutput@j,w
   851     07D0  3E20               	addlw	(low (_k| 0))& (0+255)
   852     07D1  0084               	movwf	4
   853     07D2  1383               	bcf	3,7	;select IRP bank0
   854     07D3  0180               	clrf	0
   855     07D4                     l870:
   856                           
   857                           ;Lcd_twonumadd_program.c: 78:     j=j-1;
   858     07D4  087D               	movf	Lcdoutput@j,w
   859     07D5  3EFF               	addlw	255
   860     07D6  00FD               	movwf	Lcdoutput@j
   861                           
   862                           ;Lcd_twonumadd_program.c: 79:     while(j!=0)
   863     07D7  2FED               	goto	l878
   864     07D8                     l872:
   865                           
   866                           ;Lcd_twonumadd_program.c: 80:     {;Lcd_twonumadd_program.c: 81:         n=0x30+k[j];
   867     07D8  087D               	movf	Lcdoutput@j,w
   868     07D9  3E20               	addlw	(low (_k| 0))& (0+255)
   869     07DA  0084               	movwf	4
   870     07DB  1383               	bcf	3,7	;select IRP bank0
   871     07DC  0800               	movf	0,w
   872     07DD  3E30               	addlw	48
   873     07DE  1283               	bcf	3,5	;RP0=0, select bank0
   874     07DF  1303               	bcf	3,6	;RP1=0, select bank0
   875     07E0  00AA               	movwf	_n
   876     07E1  3000               	movlw	0
   877     07E2  1803               	skipnc
   878     07E3  3001               	movlw	1
   879     07E4  00AB               	movwf	_n+1
   880     07E5                     l874:
   881                           
   882                           ;Lcd_twonumadd_program.c: 82:         Lcd_Data(n);
   883     07E5  082A               	movf	_n,w
   884     07E6  120A  118A  263D  120A  118A  	fcall	_Lcd_Data
   885     07EB                     l876:
   886                           
   887                           ;Lcd_twonumadd_program.c: 83:         j--;
   888     07EB  3001               	movlw	1
   889     07EC  02FD               	subwf	Lcdoutput@j,f
   890     07ED                     l878:
   891                           
   892                           ;Lcd_twonumadd_program.c: 79:     while(j!=0)
   893     07ED  087D               	movf	Lcdoutput@j,w
   894     07EE  1D03               	btfss	3,2
   895     07EF  2FF1               	goto	u231
   896     07F0  2FF2               	goto	u230
   897     07F1                     u231:
   898     07F1  2FD8               	goto	l872
   899     07F2                     u230:
   900     07F2                     l60:
   901     07F2  0008               	return
   902     07F3                     __end_of_Lcdoutput:
   903                           
   904                           	psect	text4
   905     067D                     __ptext4:	
   906 ;; *************** function ___lwdiv *****************
   907 ;; Defined at:
   908 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwdiv.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  divisor         2    0[COMMON] unsigned int 
   911 ;;  dividend        2    2[COMMON] unsigned int 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  quotient        2    4[COMMON] unsigned int 
   914 ;;  counter         1    6[COMMON] unsigned char 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  2    0[COMMON] unsigned int 
   917 ;; Registers used:
   918 ;;		wreg, status,2, status,0, btemp+1
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   924 ;;      Params:         4       0       0       0       0
   925 ;;      Locals:         3       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0
   927 ;;      Totals:         7       0       0       0       0
   928 ;;Total ram usage:        7 bytes
   929 ;; Hardware stack levels used: 1
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_Lcdoutput
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937     067D                     ___lwdiv:	
   938                           ;psect for function ___lwdiv
   939                           
   940     067D                     l798:	
   941                           ;incstack = 0
   942                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   943                           
   944     067D  01F4               	clrf	___lwdiv@quotient
   945     067E  01F5               	clrf	___lwdiv@quotient+1
   946     067F                     l800:
   947     067F  0870               	movf	___lwdiv@divisor,w
   948     0680  0471               	iorwf	___lwdiv@divisor+1,w
   949     0681  1903               	btfsc	3,2
   950     0682  2E84               	goto	u151
   951     0683  2E85               	goto	u150
   952     0684                     u151:
   953     0684  2EBC               	goto	l820
   954     0685                     u150:
   955     0685                     l802:
   956     0685  01F6               	clrf	___lwdiv@counter
   957     0686  0AF6               	incf	___lwdiv@counter,f
   958     0687  2E93               	goto	l808
   959     0688                     l804:
   960     0688  3001               	movlw	1
   961     0689                     u165:
   962     0689  1003               	clrc
   963     068A  0DF0               	rlf	___lwdiv@divisor,f
   964     068B  0DF1               	rlf	___lwdiv@divisor+1,f
   965     068C  3EFF               	addlw	-1
   966     068D  1D03               	skipz
   967     068E  2E89               	goto	u165
   968     068F                     l806:
   969     068F  3001               	movlw	1
   970     0690  00FF               	movwf	btemp+1
   971     0691  087F               	movf	btemp+1,w
   972     0692  07F6               	addwf	___lwdiv@counter,f
   973     0693                     l808:
   974     0693  1FF1               	btfss	___lwdiv@divisor+1,7
   975     0694  2E96               	goto	u171
   976     0695  2E97               	goto	u170
   977     0696                     u171:
   978     0696  2E88               	goto	l804
   979     0697                     u170:
   980     0697                     l810:
   981     0697  3001               	movlw	1
   982     0698                     u185:
   983     0698  1003               	clrc
   984     0699  0DF4               	rlf	___lwdiv@quotient,f
   985     069A  0DF5               	rlf	___lwdiv@quotient+1,f
   986     069B  3EFF               	addlw	-1
   987     069C  1D03               	skipz
   988     069D  2E98               	goto	u185
   989     069E  0871               	movf	___lwdiv@divisor+1,w
   990     069F  0273               	subwf	___lwdiv@dividend+1,w
   991     06A0  1D03               	skipz
   992     06A1  2EA4               	goto	u195
   993     06A2  0870               	movf	___lwdiv@divisor,w
   994     06A3  0272               	subwf	___lwdiv@dividend,w
   995     06A4                     u195:
   996     06A4  1C03               	skipc
   997     06A5  2EA7               	goto	u191
   998     06A6  2EA8               	goto	u190
   999     06A7                     u191:
  1000     06A7  2EAF               	goto	l816
  1001     06A8                     u190:
  1002     06A8                     l812:
  1003     06A8  0870               	movf	___lwdiv@divisor,w
  1004     06A9  02F2               	subwf	___lwdiv@dividend,f
  1005     06AA  0871               	movf	___lwdiv@divisor+1,w
  1006     06AB  1C03               	skipc
  1007     06AC  03F3               	decf	___lwdiv@dividend+1,f
  1008     06AD  02F3               	subwf	___lwdiv@dividend+1,f
  1009     06AE                     l814:
  1010     06AE  1474               	bsf	___lwdiv@quotient,0
  1011     06AF                     l816:
  1012     06AF  3001               	movlw	1
  1013     06B0                     u205:
  1014     06B0  1003               	clrc
  1015     06B1  0CF1               	rrf	___lwdiv@divisor+1,f
  1016     06B2  0CF0               	rrf	___lwdiv@divisor,f
  1017     06B3  3EFF               	addlw	-1
  1018     06B4  1D03               	skipz
  1019     06B5  2EB0               	goto	u205
  1020     06B6                     l818:
  1021     06B6  3001               	movlw	1
  1022     06B7  02F6               	subwf	___lwdiv@counter,f
  1023     06B8  1D03               	btfss	3,2
  1024     06B9  2EBB               	goto	u211
  1025     06BA  2EBC               	goto	u210
  1026     06BB                     u211:
  1027     06BB  2E97               	goto	l810
  1028     06BC                     u210:
  1029     06BC                     l820:
  1030     06BC  0875               	movf	___lwdiv@quotient+1,w
  1031     06BD  00F1               	movwf	?___lwdiv+1
  1032     06BE  0874               	movf	___lwdiv@quotient,w
  1033     06BF  00F0               	movwf	?___lwdiv
  1034     06C0                     l438:
  1035     06C0  0008               	return
  1036     06C1                     __end_of___lwdiv:
  1037                           
  1038                           	psect	text5
  1039     0651                     __ptext5:	
  1040 ;; *************** function ___bmul *****************
  1041 ;; Defined at:
  1042 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;  multiplier      1    wreg     unsigned char 
  1045 ;;  multiplicand    1    7[COMMON] unsigned char 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;  multiplier      1    9[COMMON] unsigned char 
  1048 ;;  product         1    8[COMMON] unsigned char 
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      unsigned char 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0, btemp+1
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1058 ;;      Params:         1       0       0       0       0
  1059 ;;      Locals:         2       0       0       0       0
  1060 ;;      Temps:          0       0       0       0       0
  1061 ;;      Totals:         3       0       0       0       0
  1062 ;;Total ram usage:        3 bytes
  1063 ;; Hardware stack levels used: 1
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_Lcdoutput
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071     0651                     ___bmul:	
  1072                           ;psect for function ___bmul
  1073                           
  1074                           
  1075                           ;incstack = 0
  1076                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1077                           ;___bmul@multiplier stored from wreg
  1078     0651  00F9               	movwf	___bmul@multiplier
  1079     0652                     l782:
  1080     0652  01F8               	clrf	___bmul@product
  1081     0653                     l784:
  1082     0653  1C79               	btfss	___bmul@multiplier,0
  1083     0654  2E56               	goto	u131
  1084     0655  2E57               	goto	u130
  1085     0656                     u131:
  1086     0656  2E5B               	goto	l788
  1087     0657                     u130:
  1088     0657                     l786:
  1089     0657  0877               	movf	___bmul@multiplicand,w
  1090     0658  00FF               	movwf	btemp+1
  1091     0659  087F               	movf	btemp+1,w
  1092     065A  07F8               	addwf	___bmul@product,f
  1093     065B                     l788:
  1094     065B  1003               	clrc
  1095     065C  0DF7               	rlf	___bmul@multiplicand,f
  1096     065D                     l790:
  1097     065D  1003               	clrc
  1098     065E  0CF9               	rrf	___bmul@multiplier,f
  1099     065F                     l792:
  1100     065F  0879               	movf	___bmul@multiplier,w
  1101     0660  1D03               	btfss	3,2
  1102     0661  2E63               	goto	u141
  1103     0662  2E64               	goto	u140
  1104     0663                     u141:
  1105     0663  2E53               	goto	l784
  1106     0664                     u140:
  1107     0664                     l794:
  1108     0664  0878               	movf	___bmul@product,w
  1109     0665                     l184:
  1110     0665  0008               	return
  1111     0666                     __end_of___bmul:
  1112                           
  1113                           	psect	text6
  1114     063D                     __ptext6:	
  1115 ;; *************** function _Lcd_Data *****************
  1116 ;; Defined at:
  1117 ;;		line 86 in file "Lcd_twonumadd_program.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  i               1    wreg     unsigned char 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  i               1    2[COMMON] unsigned char 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      void 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, btemp+1
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1131 ;;      Params:         0       0       0       0       0
  1132 ;;      Locals:         1       0       0       0       0
  1133 ;;      Temps:          2       0       0       0       0
  1134 ;;      Totals:         3       0       0       0       0
  1135 ;;Total ram usage:        3 bytes
  1136 ;; Hardware stack levels used: 1
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;;		_Lcdoutput
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145     063D                     _Lcd_Data:	
  1146                           ;psect for function _Lcd_Data
  1147                           
  1148                           
  1149                           ;incstack = 0
  1150                           ; Regs used in _Lcd_Data: [wreg+status,2+status,0+btemp+1]
  1151                           ;Lcd_Data@i stored from wreg
  1152     063D  00F2               	movwf	Lcd_Data@i
  1153     063E                     l772:
  1154                           
  1155                           ;Lcd_twonumadd_program.c: 86: void Lcd_Data(unsigned char i);Lcd_twonumadd_program.c: 87
      +                          : {;Lcd_twonumadd_program.c: 88:     PORTC|=0x08;
  1156     063E  1283               	bcf	3,5	;RP0=0, select bank0
  1157     063F  1303               	bcf	3,6	;RP1=0, select bank0
  1158     0640  1587               	bsf	7,3	;volatile
  1159     0641                     l774:
  1160                           
  1161                           ;Lcd_twonumadd_program.c: 89:     PORTD=i;
  1162     0641  0872               	movf	Lcd_Data@i,w
  1163     0642  0088               	movwf	8	;volatile
  1164     0643                     l776:
  1165                           
  1166                           ;Lcd_twonumadd_program.c: 90:     PORTC|=0x01;
  1167     0643  1407               	bsf	7,0	;volatile
  1168     0644                     l778:
  1169                           
  1170                           ;Lcd_twonumadd_program.c: 91:     PORTC&=~0x01;
  1171     0644  30FE               	movlw	254
  1172     0645  00FF               	movwf	btemp+1
  1173     0646  087F               	movf	btemp+1,w
  1174     0647  0587               	andwf	7,f	;volatile
  1175     0648                     l780:
  1176                           
  1177                           ;Lcd_twonumadd_program.c: 92:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1178     0648  30C3               	movlw	195
  1179     0649  00F1               	movwf	??_Lcd_Data+1
  1180     064A  30CD               	movlw	205
  1181     064B  00F0               	movwf	??_Lcd_Data
  1182     064C                     u327:
  1183     064C  0BF0               	decfsz	??_Lcd_Data,f
  1184     064D  2E4C               	goto	u327
  1185     064E  0BF1               	decfsz	??_Lcd_Data+1,f
  1186     064F  2E4C               	goto	u327
  1187     0650                     l63:
  1188     0650  0008               	return
  1189     0651                     __end_of_Lcd_Data:
  1190     007E                     btemp	set	126	;btemp
  1191     007E                     wtemp0	set	126
  1192                           
  1193                           	psect	config
  1194                           
  1195                           ;Config register CONFIG @ 0x2007
  1196                           ;	Oscillator Selection bits
  1197                           ;	FOSC = EXTRC, RC oscillator
  1198                           ;	Watchdog Timer Enable bit
  1199                           ;	WDTE = OFF, WDT disabled
  1200                           ;	Power-up Timer Enable bit
  1201                           ;	PWRTE = OFF, PWRT disabled
  1202                           ;	Brown-out Reset Enable bit
  1203                           ;	BOREN = OFF, BOR disabled
  1204                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1205                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1206                           ;	Data EEPROM Memory Code Protection bit
  1207                           ;	CPD = OFF, Data EEPROM code protection off
  1208                           ;	Flash Program Memory Write Enable bits
  1209                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1210                           ;	In-Circuit Debugger Mode bit
  1211                           ;	DEBUG = 0x1, unprogrammed default
  1212                           ;	Flash Program Memory Code Protection bit
  1213                           ;	CP = OFF, Code protection off
  1214     2007                     	org	8199
  1215     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Lcdoutput
    _init->_Lcd_Command
    _Lcdoutput->___bmul
    ___bmul->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1109
                        _Lcd_Command
                           _Lcd_Data
                          _Lcdoutput
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcdoutput                                            4     2      2    1043
                                             10 COMMON     4     2      2
                           _Lcd_Data
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     168
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Command
   _Lcd_Data
   _Lcdoutput
     _Lcd_Data
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv
   _init
     _Lcd_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      28       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      28      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jul 16 18:17:50 2024

                      _j 0038                        _k 0020                        _m 002C  
                      _n 002A                        _s 0039           ___bmul@product 0078  
                     l51 0789                       l60 07F2                       l45 071F  
                     l46 071F                       l63 0650                       l66 067C  
                     fsr 0004                      l184 0665                      l438 06C0  
                    l800 067F                      l810 0697                      l802 0685  
                    l812 06A8                      l804 0688                      l820 06BC  
                    l900 0704                      l814 06AE                      l806 068F  
                    l830 0735                      l902 070A                      l816 06AF  
                    l808 0693                      l840 0757                      l832 073B  
                    l824 0723                      l904 0710                      l818 06B6  
                    l770 0670                      l850 077B                      l842 075F  
                    l834 0743                      l826 0727                      l906 0716  
                    l780 0648                      l772 063E                      l860 07AC  
                    l764 0667                      l852 0781                      l844 0765  
                    l836 0749                      l828 072D                      l774 0641  
                    l790 065D                      l782 0652                      l870 07D4  
                    l862 07B2                      l854 078A                      l766 066D  
                    l846 076D                      l838 0751                      l776 0643  
                    l792 065F                      l784 0653                      l872 07D8  
                    l864 07B6                      l856 078C                      l768 066F  
                    l848 0773                      l880 06C1                      l778 0644  
                    l794 0664                      l786 0657                      l874 07E5  
                    l858 0793                      l866 07C9                      l890 06DA  
                    l882 06C6                      l788 065B                      l876 07EB  
                    l868 07CF                      l892 06E3                      l884 06CC  
                    l798 067D                      l878 07ED                      l894 06E9  
                    l886 06D0                      l896 06EF                      l888 06D2  
                    l898 06FE                      u130 0657                      u210 06BC  
                    u131 0656                      u211 06BB                      u140 0664  
                    u220 07CF                      u141 0663                      u205 06B0  
                    u221 07CE                      u150 0685                      u230 07F2  
                    u151 0684                      u231 07F1                      u170 0697  
                    u171 0696                      u307 0785                      u165 0689  
                    u317 0678                      u190 06A8                      u327 064C  
                    u191 06A7                      u247 0731                      u185 0698  
                    u257 073F                      u195 06A4                      u267 074D  
                    u277 075B                      u287 0769                      u297 0777  
             Lcdoutput@i 007A               Lcdoutput@j 007D               Lcdoutput@s 007C  
                    fsr0 0004                      _sum 0030                      indf 0000  
    __end_of_Lcd_Command 067D                     _main 06C1                     _init 0723  
                   _num1 0034                     _num2 0032                     _plus 0036  
                   btemp 007E                     start 0000        ___bmul@multiplier 0079  
                  ?_main 0070                    ?_init 0070          __end_of___lwdiv 06C1  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088                    _Equal 0037                    status 0003  
                  wtemp0 007E         __end_of_Lcd_Data 0651          __initialization 07F3  
           __end_of_main 0723             __end_of_init 078A              _Lcd_Command 0666  
                 ??_main 007E                   ??_init 0073                   ___bmul 0651  
              ??___lwdiv 0074  __end_of__initialization 07FC      ___bmul@multiplicand 0077  
         __pcstackCOMMON 0070        __end_of_Lcdoutput 07F3                ?_Lcd_Data 0070  
             __pbssBANK0 0020               _delaycount 002E               __pmaintext 06C1  
                ?___bmul 0077               ??_Lcd_Data 0070                  ___lwdiv 067D  
           ?_Lcd_Command 0070                  __ptext1 0723                  __ptext2 0666  
                __ptext3 078A                  __ptext4 067D                  __ptext5 0651  
                __ptext6 063D                  clrloop0 0636     end_of_initialization 07FC  
              Lcd_Data@i 0072           __end_of___bmul 0666                _Lcdoutput 078A  
    start_initialization 07F3                 ??___bmul 0078               ?_Lcdoutput 007A  
              ___latbits 0002         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
       ___lwdiv@quotient 0074                clear_ram0 0635             Lcd_Command@i 0072  
            ??_Lcdoutput 007C                 _Lcd_Data 063D          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076            ??_Lcd_Command 0070  
